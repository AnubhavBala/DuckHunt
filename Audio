import java.io.File;
import java.io.IOException;

import javax.sound.sampled.*;

/**
 * Allows the application to play sounds
 * 
 * @author Anu B. Luka Z. Eli P.
 * 
 */
public class Sound implements Runnable, LineListener {

	/**
	 * File of the audio
	 */
	private File audio;
	/**
	 * Expresses the audio as frames
	 */
	private AudioInputStream stream;
	/**
	 * Allows the loading of the audio file
	 */
	private Clip clip;
	/**
	 * Checks if the clip is playing
	 */
	private boolean playing = true;

	/**
	 * Sets the file based on location of audio file
	 * 
	 * @param fileName
	 *            : File location of the audio
	 */
	Sound(String fileName) {
		audio = new File(fileName);
	}

	/**
	 * Runs and plays the audio file
	 */
	public void run() {
		try {
			// Get the stream and the format
			stream = AudioSystem.getAudioInputStream(audio);
			DataLine.Info info = new DataLine.Info(Clip.class,
					stream.getFormat());
			
			// Read the line of audio
			clip = (Clip) AudioSystem.getLine(info);
			
			// Open the clip and start playing
			clip.open(stream);
			clip.start();
			
			// Check every once in a while if it is still playing
			while (playing) {
				try {
					Thread.sleep(100);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			// Close after done playing
			clip.stop();
			clip.close();
			stream.close();
		} catch (LineUnavailableException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (UnsupportedAudioFileException e) {
			e.printStackTrace();
		}

	}

	/**
	 * Checks if audio is still playing based on if it reaches the last frame
	 */
	@Override
	public void update(LineEvent l) {
		if (l.getType() == LineEvent.Type.STOP) {
			playing = false;
		}

	}
}
